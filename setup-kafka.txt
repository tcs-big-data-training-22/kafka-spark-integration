# How to setup Kafka

## Step 1 – Installing Java
- Apache Kafka can be run on all platform supported Java. In order to setup Kafka on Ubuntu system, you need to install java first. As we know, the Oracle java is now commercially available, So we are using its open source version OpenJDK.
```
sudo apt update 
sudo apt install default-jdk
```

- Check Version
```
java --version 
```

## Step 2 – Download Latest Apache Kafka
- Download the Apache Kafka binary files from its official download website. You can also select any nearby mirror to download.
```
wget https://dlcdn.apache.org/kafka/3.2.0/kafka_2.13-3.2.0.tgz 
tar xzf kafka_2.13-3.2.0.tgz 
sudo mv kafka_2.13-3.2.0 /usr/local/kafka 
```

## Step 3 – Creating Systemd Unit Files
- Now, you need to create systemd unit files for the Zookeeper and Kafka services. Which will help you to start/stop the Kafka service in an easy way.

- First, create a systemd unit file for Zookeeper:
```
sudo nano /etc/systemd/system/zookeeper.service
```

```
[Unit]
Description=Apache Zookeeper server
Documentation=http://zookeeper.apache.org
Requires=network.target remote-fs.target
After=network.target remote-fs.target

[Service]
Type=simple
ExecStart=/usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties
ExecStop=/usr/local/kafka/bin/zookeeper-server-stop.sh
Restart=on-abnormal

[Install]
WantedBy=multi-user.target
```

- Next, to create a systemd unit file for the Kafka service:

```
sudo nano /etc/systemd/system/kafka.service
```

```
[Unit]
Description=Apache Kafka Server
Documentation=http://kafka.apache.org/documentation.html
Requires=zookeeper.service

[Service]
Type=simple
Environment="JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64"
ExecStart=/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties
ExecStop=/usr/local/kafka/bin/kafka-server-stop.sh

[Install]
WantedBy=multi-user.target
```

## Step 4 – Start Kafka and Zookeeper Service
- First, you need to start ZooKeeper service and then start Kafka. Use the systemctl command to start a single-node ZooKeeper instance.
```
sudo systemctl daemon-reload
sudo systemctl stop zookeeper
sudo systemctl start zookeeper
sudo systemctl status zookeeper
```

```
sudo systemctl stop kafka
sudo systemctl start kafka
sudo systemctl status kafka
```

## Step 5 – Create a Topic in Kafka
- Kafka provides multiple pre-built shell script to work on it. First, create a topic named “testTopic” with a single partition with single replica:
```
cd /usr/local/kafka
bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic testTopic
```


## Step 6 – Send and Receive Messages in Kafka
- The “producer” is the process responsible for put data into our Kafka. The Kafka comes with a command-line client that will take input from a file or from standard input and send it out as messages to the Kafka cluster. The default Kafka sends each line as a separate message.

Let’s run the producer and then type a few messages into the console to send to the server.
```
cd /usr/local/kafka
bin/kafka-console-producer.sh --broker-list localhost:9092 --topic testTopic
```


## Step 7 – Using Kafka Consumer
- Kafka also has a command-line consumer to read data from the Kafka cluster and display messages to standard output.
```
cd /usr/local/kafka
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic testTopic --from-beginning
```

